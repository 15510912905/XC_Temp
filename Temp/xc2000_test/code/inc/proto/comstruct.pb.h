// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comstruct.proto

#ifndef PROTOBUF_comstruct_2eproto__INCLUDED
#define PROTOBUF_comstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "typedefine.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_comstruct_2eproto();
void protobuf_AssignDesc_comstruct_2eproto();
void protobuf_ShutdownFile_comstruct_2eproto();

class STReqShowSmooth;
class adOP;
class STResShowSmooth;

enum ComMsgType {
  MSG_ReqShowSmooth = 4001,
  MSG_ResShowSmooth = 4002
};
bool ComMsgType_IsValid(int value);
const ComMsgType ComMsgType_MIN = MSG_ReqShowSmooth;
const ComMsgType ComMsgType_MAX = MSG_ResShowSmooth;
const int ComMsgType_ARRAYSIZE = ComMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComMsgType_descriptor();
inline const ::std::string& ComMsgType_Name(ComMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComMsgType_descriptor(), value);
}
inline bool ComMsgType_Parse(
    const ::std::string& name, ComMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComMsgType>(
    ComMsgType_descriptor(), name, value);
}
// ===================================================================

class STReqShowSmooth : public ::google::protobuf::Message {
 public:
  STReqShowSmooth();
  virtual ~STReqShowSmooth();

  STReqShowSmooth(const STReqShowSmooth& from);

  inline STReqShowSmooth& operator=(const STReqShowSmooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STReqShowSmooth& default_instance();

  void Swap(STReqShowSmooth* other);

  // implements Message ----------------------------------------------

  STReqShowSmooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STReqShowSmooth& from);
  void MergeFrom(const STReqShowSmooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STReqShowSmooth)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_comstruct_2eproto();
  friend void protobuf_AssignDesc_comstruct_2eproto();
  friend void protobuf_ShutdownFile_comstruct_2eproto();

  void InitAsDefaultInstance();
  static STReqShowSmooth* default_instance_;
};
// -------------------------------------------------------------------

class adOP : public ::google::protobuf::Message {
 public:
  adOP();
  virtual ~adOP();

  adOP(const adOP& from);

  inline adOP& operator=(const adOP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const adOP& default_instance();

  void Swap(adOP* other);

  // implements Message ----------------------------------------------

  adOP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const adOP& from);
  void MergeFrom(const adOP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::uint32 op() const;
  inline void set_op(::google::protobuf::uint32 value);

  // optional uint32 ad = 2;
  inline bool has_ad() const;
  inline void clear_ad();
  static const int kAdFieldNumber = 2;
  inline ::google::protobuf::uint32 ad() const;
  inline void set_ad(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:adOP)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_ad();
  inline void clear_has_ad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 op_;
  ::google::protobuf::uint32 ad_;
  friend void  protobuf_AddDesc_comstruct_2eproto();
  friend void protobuf_AssignDesc_comstruct_2eproto();
  friend void protobuf_ShutdownFile_comstruct_2eproto();

  void InitAsDefaultInstance();
  static adOP* default_instance_;
};
// -------------------------------------------------------------------

class STResShowSmooth : public ::google::protobuf::Message {
 public:
  STResShowSmooth();
  virtual ~STResShowSmooth();

  STResShowSmooth(const STResShowSmooth& from);

  inline STResShowSmooth& operator=(const STResShowSmooth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STResShowSmooth& default_instance();

  void Swap(STResShowSmooth* other);

  // implements Message ----------------------------------------------

  STResShowSmooth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STResShowSmooth& from);
  void MergeFrom(const STResShowSmooth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ReactCircle cirle = 1;
  inline bool has_cirle() const;
  inline void clear_cirle();
  static const int kCirleFieldNumber = 1;
  inline ::ReactCircle cirle() const;
  inline void set_cirle(::ReactCircle value);

  // repeated .adOP value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::adOP& value(int index) const;
  inline ::adOP* mutable_value(int index);
  inline ::adOP* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::adOP >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::adOP >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:STResShowSmooth)
 private:
  inline void set_has_cirle();
  inline void clear_has_cirle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::adOP > value_;
  int cirle_;
  friend void  protobuf_AddDesc_comstruct_2eproto();
  friend void protobuf_AssignDesc_comstruct_2eproto();
  friend void protobuf_ShutdownFile_comstruct_2eproto();

  void InitAsDefaultInstance();
  static STResShowSmooth* default_instance_;
};
// ===================================================================


// ===================================================================

// STReqShowSmooth

// optional uint32 count = 1;
inline bool STReqShowSmooth::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STReqShowSmooth::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STReqShowSmooth::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STReqShowSmooth::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 STReqShowSmooth::count() const {
  // @@protoc_insertion_point(field_get:STReqShowSmooth.count)
  return count_;
}
inline void STReqShowSmooth::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:STReqShowSmooth.count)
}

// -------------------------------------------------------------------

// adOP

// optional uint32 op = 1;
inline bool adOP::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void adOP::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void adOP::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void adOP::clear_op() {
  op_ = 0u;
  clear_has_op();
}
inline ::google::protobuf::uint32 adOP::op() const {
  // @@protoc_insertion_point(field_get:adOP.op)
  return op_;
}
inline void adOP::set_op(::google::protobuf::uint32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:adOP.op)
}

// optional uint32 ad = 2;
inline bool adOP::has_ad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void adOP::set_has_ad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void adOP::clear_has_ad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void adOP::clear_ad() {
  ad_ = 0u;
  clear_has_ad();
}
inline ::google::protobuf::uint32 adOP::ad() const {
  // @@protoc_insertion_point(field_get:adOP.ad)
  return ad_;
}
inline void adOP::set_ad(::google::protobuf::uint32 value) {
  set_has_ad();
  ad_ = value;
  // @@protoc_insertion_point(field_set:adOP.ad)
}

// -------------------------------------------------------------------

// STResShowSmooth

// optional .ReactCircle cirle = 1;
inline bool STResShowSmooth::has_cirle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STResShowSmooth::set_has_cirle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STResShowSmooth::clear_has_cirle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STResShowSmooth::clear_cirle() {
  cirle_ = 0;
  clear_has_cirle();
}
inline ::ReactCircle STResShowSmooth::cirle() const {
  // @@protoc_insertion_point(field_get:STResShowSmooth.cirle)
  return static_cast< ::ReactCircle >(cirle_);
}
inline void STResShowSmooth::set_cirle(::ReactCircle value) {
  assert(::ReactCircle_IsValid(value));
  set_has_cirle();
  cirle_ = value;
  // @@protoc_insertion_point(field_set:STResShowSmooth.cirle)
}

// repeated .adOP value = 2;
inline int STResShowSmooth::value_size() const {
  return value_.size();
}
inline void STResShowSmooth::clear_value() {
  value_.Clear();
}
inline const ::adOP& STResShowSmooth::value(int index) const {
  // @@protoc_insertion_point(field_get:STResShowSmooth.value)
  return value_.Get(index);
}
inline ::adOP* STResShowSmooth::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:STResShowSmooth.value)
  return value_.Mutable(index);
}
inline ::adOP* STResShowSmooth::add_value() {
  // @@protoc_insertion_point(field_add:STResShowSmooth.value)
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::adOP >&
STResShowSmooth::value() const {
  // @@protoc_insertion_point(field_list:STResShowSmooth.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::adOP >*
STResShowSmooth::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:STResShowSmooth.value)
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ComMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ComMsgType>() {
  return ::ComMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comstruct_2eproto__INCLUDED
