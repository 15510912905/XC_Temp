// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upmsgstruct.proto

#ifndef PROTOBUF_upmsgstruct_2eproto__INCLUDED
#define PROTOBUF_upmsgstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "typedefine.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_upmsgstruct_2eproto();
void protobuf_AssignDesc_upmsgstruct_2eproto();
void protobuf_ShutdownFile_upmsgstruct_2eproto();

class STKeyValue;
class STAdPoints;
class STCupPos;
class STMarginScan;
class STLiquidInfo;
class STRctCupStatus;
class STBarcodeScan;
class STReagInfo;
class STThreshold;
class STCupADValue;
class STOffsetPara;
class STDarkCurrentAD;
class STSubVers;
class STAlarmInfo;
class STTestVal;
class SmosData;
class STAbSorbSmos;
class STCupID;
class STSmpBacode;

// ===================================================================

class STKeyValue : public ::google::protobuf::Message {
 public:
  STKeyValue();
  virtual ~STKeyValue();

  STKeyValue(const STKeyValue& from);

  inline STKeyValue& operator=(const STKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STKeyValue& default_instance();

  void Swap(STKeyValue* other);

  // implements Message ----------------------------------------------

  STKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STKeyValue& from);
  void MergeFrom(const STKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiKey = 1;
  inline bool has_uikey() const;
  inline void clear_uikey();
  static const int kUiKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 uikey() const;
  inline void set_uikey(::google::protobuf::uint32 value);

  // optional uint32 uiVal = 2;
  inline bool has_uival() const;
  inline void clear_uival();
  static const int kUiValFieldNumber = 2;
  inline ::google::protobuf::uint32 uival() const;
  inline void set_uival(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STKeyValue)
 private:
  inline void set_has_uikey();
  inline void clear_has_uikey();
  inline void set_has_uival();
  inline void clear_has_uival();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uikey_;
  ::google::protobuf::uint32 uival_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class STAdPoints : public ::google::protobuf::Message {
 public:
  STAdPoints();
  virtual ~STAdPoints();

  STAdPoints(const STAdPoints& from);

  inline STAdPoints& operator=(const STAdPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STAdPoints& default_instance();

  void Swap(STAdPoints* other);

  // implements Message ----------------------------------------------

  STAdPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STAdPoints& from);
  void MergeFrom(const STAdPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uiADPoints = 1;
  inline int uiadpoints_size() const;
  inline void clear_uiadpoints();
  static const int kUiADPointsFieldNumber = 1;
  inline ::google::protobuf::uint32 uiadpoints(int index) const;
  inline void set_uiadpoints(int index, ::google::protobuf::uint32 value);
  inline void add_uiadpoints(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uiadpoints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uiadpoints();

  // @@protoc_insertion_point(class_scope:STAdPoints)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uiadpoints_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STAdPoints* default_instance_;
};
// -------------------------------------------------------------------

class STCupPos : public ::google::protobuf::Message {
 public:
  STCupPos();
  virtual ~STCupPos();

  STCupPos(const STCupPos& from);

  inline STCupPos& operator=(const STCupPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STCupPos& default_instance();

  void Swap(STCupPos* other);

  // implements Message ----------------------------------------------

  STCupPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STCupPos& from);
  void MergeFrom(const STCupPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiDskId = 1;
  inline bool has_uidskid() const;
  inline void clear_uidskid();
  static const int kUiDskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uidskid() const;
  inline void set_uidskid(::google::protobuf::uint32 value);

  // optional uint32 uiCupId = 2;
  inline bool has_uicupid() const;
  inline void clear_uicupid();
  static const int kUiCupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uicupid() const;
  inline void set_uicupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STCupPos)
 private:
  inline void set_has_uidskid();
  inline void clear_has_uidskid();
  inline void set_has_uicupid();
  inline void clear_has_uicupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uidskid_;
  ::google::protobuf::uint32 uicupid_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STCupPos* default_instance_;
};
// -------------------------------------------------------------------

class STMarginScan : public ::google::protobuf::Message {
 public:
  STMarginScan();
  virtual ~STMarginScan();

  STMarginScan(const STMarginScan& from);

  inline STMarginScan& operator=(const STMarginScan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STMarginScan& default_instance();

  void Swap(STMarginScan* other);

  // implements Message ----------------------------------------------

  STMarginScan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STMarginScan& from);
  void MergeFrom(const STMarginScan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .STCupPos stCupPos = 1;
  inline bool has_stcuppos() const;
  inline void clear_stcuppos();
  static const int kStCupPosFieldNumber = 1;
  inline const ::STCupPos& stcuppos() const;
  inline ::STCupPos* mutable_stcuppos();
  inline ::STCupPos* release_stcuppos();
  inline void set_allocated_stcuppos(::STCupPos* stcuppos);

  // optional uint32 uiMarginDepth = 2;
  inline bool has_uimargindepth() const;
  inline void clear_uimargindepth();
  static const int kUiMarginDepthFieldNumber = 2;
  inline ::google::protobuf::uint32 uimargindepth() const;
  inline void set_uimargindepth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STMarginScan)
 private:
  inline void set_has_stcuppos();
  inline void clear_has_stcuppos();
  inline void set_has_uimargindepth();
  inline void clear_has_uimargindepth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::STCupPos* stcuppos_;
  ::google::protobuf::uint32 uimargindepth_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STMarginScan* default_instance_;
};
// -------------------------------------------------------------------

class STLiquidInfo : public ::google::protobuf::Message {
 public:
  STLiquidInfo();
  virtual ~STLiquidInfo();

  STLiquidInfo(const STLiquidInfo& from);

  inline STLiquidInfo& operator=(const STLiquidInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STLiquidInfo& default_instance();

  void Swap(STLiquidInfo* other);

  // implements Message ----------------------------------------------

  STLiquidInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STLiquidInfo& from);
  void MergeFrom(const STLiquidInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .STCupPos stCupPos = 1;
  inline bool has_stcuppos() const;
  inline void clear_stcuppos();
  static const int kStCupPosFieldNumber = 1;
  inline const ::STCupPos& stcuppos() const;
  inline ::STCupPos* mutable_stcuppos();
  inline ::STCupPos* release_stcuppos();
  inline void set_allocated_stcuppos(::STCupPos* stcuppos);

  // optional uint32 uiAddVol = 2;
  inline bool has_uiaddvol() const;
  inline void clear_uiaddvol();
  static const int kUiAddVolFieldNumber = 2;
  inline ::google::protobuf::uint32 uiaddvol() const;
  inline void set_uiaddvol(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STLiquidInfo)
 private:
  inline void set_has_stcuppos();
  inline void clear_has_stcuppos();
  inline void set_has_uiaddvol();
  inline void clear_has_uiaddvol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::STCupPos* stcuppos_;
  ::google::protobuf::uint32 uiaddvol_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STLiquidInfo* default_instance_;
};
// -------------------------------------------------------------------

class STRctCupStatus : public ::google::protobuf::Message {
 public:
  STRctCupStatus();
  virtual ~STRctCupStatus();

  STRctCupStatus(const STRctCupStatus& from);

  inline STRctCupStatus& operator=(const STRctCupStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STRctCupStatus& default_instance();

  void Swap(STRctCupStatus* other);

  // implements Message ----------------------------------------------

  STRctCupStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STRctCupStatus& from);
  void MergeFrom(const STRctCupStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiRctCupPos = 1;
  inline bool has_uirctcuppos() const;
  inline void clear_uirctcuppos();
  static const int kUiRctCupPosFieldNumber = 1;
  inline ::google::protobuf::uint32 uirctcuppos() const;
  inline void set_uirctcuppos(::google::protobuf::uint32 value);

  // optional .CupState enCupState = 2 [default = CUP_STATE_FREE];
  inline bool has_encupstate() const;
  inline void clear_encupstate();
  static const int kEnCupStateFieldNumber = 2;
  inline ::CupState encupstate() const;
  inline void set_encupstate(::CupState value);

  // optional uint32 uiRctTimes = 3;
  inline bool has_uircttimes() const;
  inline void clear_uircttimes();
  static const int kUiRctTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 uircttimes() const;
  inline void set_uircttimes(::google::protobuf::uint32 value);

  // optional uint32 uiTaskId = 4;
  inline bool has_uitaskid() const;
  inline void clear_uitaskid();
  static const int kUiTaskIdFieldNumber = 4;
  inline ::google::protobuf::uint32 uitaskid() const;
  inline void set_uitaskid(::google::protobuf::uint32 value);

  // optional .STCupPos stSmpPos = 5;
  inline bool has_stsmppos() const;
  inline void clear_stsmppos();
  static const int kStSmpPosFieldNumber = 5;
  inline const ::STCupPos& stsmppos() const;
  inline ::STCupPos* mutable_stsmppos();
  inline ::STCupPos* release_stsmppos();
  inline void set_allocated_stsmppos(::STCupPos* stsmppos);

  // optional uint32 uiDilutType = 6;
  inline bool has_uidiluttype() const;
  inline void clear_uidiluttype();
  static const int kUiDilutTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 uidiluttype() const;
  inline void set_uidiluttype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STRctCupStatus)
 private:
  inline void set_has_uirctcuppos();
  inline void clear_has_uirctcuppos();
  inline void set_has_encupstate();
  inline void clear_has_encupstate();
  inline void set_has_uircttimes();
  inline void clear_has_uircttimes();
  inline void set_has_uitaskid();
  inline void clear_has_uitaskid();
  inline void set_has_stsmppos();
  inline void clear_has_stsmppos();
  inline void set_has_uidiluttype();
  inline void clear_has_uidiluttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uirctcuppos_;
  int encupstate_;
  ::google::protobuf::uint32 uircttimes_;
  ::google::protobuf::uint32 uitaskid_;
  ::STCupPos* stsmppos_;
  ::google::protobuf::uint32 uidiluttype_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STRctCupStatus* default_instance_;
};
// -------------------------------------------------------------------

class STBarcodeScan : public ::google::protobuf::Message {
 public:
  STBarcodeScan();
  virtual ~STBarcodeScan();

  STBarcodeScan(const STBarcodeScan& from);

  inline STBarcodeScan& operator=(const STBarcodeScan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STBarcodeScan& default_instance();

  void Swap(STBarcodeScan* other);

  // implements Message ----------------------------------------------

  STBarcodeScan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STBarcodeScan& from);
  void MergeFrom(const STBarcodeScan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .STCupPos stCupPos = 1;
  inline bool has_stcuppos() const;
  inline void clear_stcuppos();
  static const int kStCupPosFieldNumber = 1;
  inline const ::STCupPos& stcuppos() const;
  inline ::STCupPos* mutable_stcuppos();
  inline ::STCupPos* release_stcuppos();
  inline void set_allocated_stcuppos(::STCupPos* stcuppos);

  // optional string strBarcode = 2;
  inline bool has_strbarcode() const;
  inline void clear_strbarcode();
  static const int kStrBarcodeFieldNumber = 2;
  inline const ::std::string& strbarcode() const;
  inline void set_strbarcode(const ::std::string& value);
  inline void set_strbarcode(const char* value);
  inline void set_strbarcode(const char* value, size_t size);
  inline ::std::string* mutable_strbarcode();
  inline ::std::string* release_strbarcode();
  inline void set_allocated_strbarcode(::std::string* strbarcode);

  // @@protoc_insertion_point(class_scope:STBarcodeScan)
 private:
  inline void set_has_stcuppos();
  inline void clear_has_stcuppos();
  inline void set_has_strbarcode();
  inline void clear_has_strbarcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::STCupPos* stcuppos_;
  ::std::string* strbarcode_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STBarcodeScan* default_instance_;
};
// -------------------------------------------------------------------

class STReagInfo : public ::google::protobuf::Message {
 public:
  STReagInfo();
  virtual ~STReagInfo();

  STReagInfo(const STReagInfo& from);

  inline STReagInfo& operator=(const STReagInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STReagInfo& default_instance();

  void Swap(STReagInfo* other);

  // implements Message ----------------------------------------------

  STReagInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STReagInfo& from);
  void MergeFrom(const STReagInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .STCupPos stCupPos = 1;
  inline bool has_stcuppos() const;
  inline void clear_stcuppos();
  static const int kStCupPosFieldNumber = 1;
  inline const ::STCupPos& stcuppos() const;
  inline ::STCupPos* mutable_stcuppos();
  inline ::STCupPos* release_stcuppos();
  inline void set_allocated_stcuppos(::STCupPos* stcuppos);

  // optional bytes strReagName = 2;
  inline bool has_strreagname() const;
  inline void clear_strreagname();
  static const int kStrReagNameFieldNumber = 2;
  inline const ::std::string& strreagname() const;
  inline void set_strreagname(const ::std::string& value);
  inline void set_strreagname(const char* value);
  inline void set_strreagname(const void* value, size_t size);
  inline ::std::string* mutable_strreagname();
  inline ::std::string* release_strreagname();
  inline void set_allocated_strreagname(::std::string* strreagname);

  // optional .BottleType enBType = 3;
  inline bool has_enbtype() const;
  inline void clear_enbtype();
  static const int kEnBTypeFieldNumber = 3;
  inline ::BottleType enbtype() const;
  inline void set_enbtype(::BottleType value);

  // optional uint32 uiMarginDepth = 4;
  inline bool has_uimargindepth() const;
  inline void clear_uimargindepth();
  static const int kUiMarginDepthFieldNumber = 4;
  inline ::google::protobuf::uint32 uimargindepth() const;
  inline void set_uimargindepth(::google::protobuf::uint32 value);

  // optional uint32 uiReType = 5;
  inline bool has_uiretype() const;
  inline void clear_uiretype();
  static const int kUiReTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 uiretype() const;
  inline void set_uiretype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STReagInfo)
 private:
  inline void set_has_stcuppos();
  inline void clear_has_stcuppos();
  inline void set_has_strreagname();
  inline void clear_has_strreagname();
  inline void set_has_enbtype();
  inline void clear_has_enbtype();
  inline void set_has_uimargindepth();
  inline void clear_has_uimargindepth();
  inline void set_has_uiretype();
  inline void clear_has_uiretype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::STCupPos* stcuppos_;
  ::std::string* strreagname_;
  int enbtype_;
  ::google::protobuf::uint32 uimargindepth_;
  ::google::protobuf::uint32 uiretype_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STReagInfo* default_instance_;
};
// -------------------------------------------------------------------

class STThreshold : public ::google::protobuf::Message {
 public:
  STThreshold();
  virtual ~STThreshold();

  STThreshold(const STThreshold& from);

  inline STThreshold& operator=(const STThreshold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STThreshold& default_instance();

  void Swap(STThreshold* other);

  // implements Message ----------------------------------------------

  STThreshold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STThreshold& from);
  void MergeFrom(const STThreshold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BottleType enBType = 1;
  inline bool has_enbtype() const;
  inline void clear_enbtype();
  static const int kEnBTypeFieldNumber = 1;
  inline ::BottleType enbtype() const;
  inline void set_enbtype(::BottleType value);

  // optional uint32 uiThreshold = 2;
  inline bool has_uithreshold() const;
  inline void clear_uithreshold();
  static const int kUiThresholdFieldNumber = 2;
  inline ::google::protobuf::uint32 uithreshold() const;
  inline void set_uithreshold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STThreshold)
 private:
  inline void set_has_enbtype();
  inline void clear_has_enbtype();
  inline void set_has_uithreshold();
  inline void clear_has_uithreshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int enbtype_;
  ::google::protobuf::uint32 uithreshold_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STThreshold* default_instance_;
};
// -------------------------------------------------------------------

class STCupADValue : public ::google::protobuf::Message {
 public:
  STCupADValue();
  virtual ~STCupADValue();

  STCupADValue(const STCupADValue& from);

  inline STCupADValue& operator=(const STCupADValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STCupADValue& default_instance();

  void Swap(STCupADValue* other);

  // implements Message ----------------------------------------------

  STCupADValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STCupADValue& from);
  void MergeFrom(const STCupADValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiCupId = 1;
  inline bool has_uicupid() const;
  inline void clear_uicupid();
  static const int kUiCupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 uicupid() const;
  inline void set_uicupid(::google::protobuf::uint32 value);

  // repeated uint32 uiADPoints = 2;
  inline int uiadpoints_size() const;
  inline void clear_uiadpoints();
  static const int kUiADPointsFieldNumber = 2;
  inline ::google::protobuf::uint32 uiadpoints(int index) const;
  inline void set_uiadpoints(int index, ::google::protobuf::uint32 value);
  inline void add_uiadpoints(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uiadpoints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uiadpoints();

  // @@protoc_insertion_point(class_scope:STCupADValue)
 private:
  inline void set_has_uicupid();
  inline void clear_has_uicupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uiadpoints_;
  ::google::protobuf::uint32 uicupid_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STCupADValue* default_instance_;
};
// -------------------------------------------------------------------

class STOffsetPara : public ::google::protobuf::Message {
 public:
  STOffsetPara();
  virtual ~STOffsetPara();

  STOffsetPara(const STOffsetPara& from);

  inline STOffsetPara& operator=(const STOffsetPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STOffsetPara& default_instance();

  void Swap(STOffsetPara* other);

  // implements Message ----------------------------------------------

  STOffsetPara* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STOffsetPara& from);
  void MergeFrom(const STOffsetPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiType = 1;
  inline bool has_uitype() const;
  inline void clear_uitype();
  static const int kUiTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 uitype() const;
  inline void set_uitype(::google::protobuf::uint32 value);

  // optional uint32 uiPos = 2;
  inline bool has_uipos() const;
  inline void clear_uipos();
  static const int kUiPosFieldNumber = 2;
  inline ::google::protobuf::uint32 uipos() const;
  inline void set_uipos(::google::protobuf::uint32 value);

  // optional uint32 uiDir = 3;
  inline bool has_uidir() const;
  inline void clear_uidir();
  static const int kUiDirFieldNumber = 3;
  inline ::google::protobuf::uint32 uidir() const;
  inline void set_uidir(::google::protobuf::uint32 value);

  // optional uint32 uiStep = 4;
  inline bool has_uistep() const;
  inline void clear_uistep();
  static const int kUiStepFieldNumber = 4;
  inline ::google::protobuf::uint32 uistep() const;
  inline void set_uistep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STOffsetPara)
 private:
  inline void set_has_uitype();
  inline void clear_has_uitype();
  inline void set_has_uipos();
  inline void clear_has_uipos();
  inline void set_has_uidir();
  inline void clear_has_uidir();
  inline void set_has_uistep();
  inline void clear_has_uistep();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uitype_;
  ::google::protobuf::uint32 uipos_;
  ::google::protobuf::uint32 uidir_;
  ::google::protobuf::uint32 uistep_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STOffsetPara* default_instance_;
};
// -------------------------------------------------------------------

class STDarkCurrentAD : public ::google::protobuf::Message {
 public:
  STDarkCurrentAD();
  virtual ~STDarkCurrentAD();

  STDarkCurrentAD(const STDarkCurrentAD& from);

  inline STDarkCurrentAD& operator=(const STDarkCurrentAD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STDarkCurrentAD& default_instance();

  void Swap(STDarkCurrentAD* other);

  // implements Message ----------------------------------------------

  STDarkCurrentAD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STDarkCurrentAD& from);
  void MergeFrom(const STDarkCurrentAD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .STKeyValue stAdInfo = 1;
  inline int stadinfo_size() const;
  inline void clear_stadinfo();
  static const int kStAdInfoFieldNumber = 1;
  inline const ::STKeyValue& stadinfo(int index) const;
  inline ::STKeyValue* mutable_stadinfo(int index);
  inline ::STKeyValue* add_stadinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::STKeyValue >&
      stadinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::STKeyValue >*
      mutable_stadinfo();

  // @@protoc_insertion_point(class_scope:STDarkCurrentAD)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::STKeyValue > stadinfo_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STDarkCurrentAD* default_instance_;
};
// -------------------------------------------------------------------

class STSubVers : public ::google::protobuf::Message {
 public:
  STSubVers();
  virtual ~STSubVers();

  STSubVers(const STSubVers& from);

  inline STSubVers& operator=(const STSubVers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STSubVers& default_instance();

  void Swap(STSubVers* other);

  // implements Message ----------------------------------------------

  STSubVers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STSubVers& from);
  void MergeFrom(const STSubVers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ulSubsysId = 1;
  inline bool has_ulsubsysid() const;
  inline void clear_ulsubsysid();
  static const int kUlSubsysIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ulsubsysid() const;
  inline void set_ulsubsysid(::google::protobuf::uint32 value);

  // optional string strTime = 2;
  inline bool has_strtime() const;
  inline void clear_strtime();
  static const int kStrTimeFieldNumber = 2;
  inline const ::std::string& strtime() const;
  inline void set_strtime(const ::std::string& value);
  inline void set_strtime(const char* value);
  inline void set_strtime(const char* value, size_t size);
  inline ::std::string* mutable_strtime();
  inline ::std::string* release_strtime();
  inline void set_allocated_strtime(::std::string* strtime);

  // optional string strVersions = 3;
  inline bool has_strversions() const;
  inline void clear_strversions();
  static const int kStrVersionsFieldNumber = 3;
  inline const ::std::string& strversions() const;
  inline void set_strversions(const ::std::string& value);
  inline void set_strversions(const char* value);
  inline void set_strversions(const char* value, size_t size);
  inline ::std::string* mutable_strversions();
  inline ::std::string* release_strversions();
  inline void set_allocated_strversions(::std::string* strversions);

  // optional uint32 fpgaVer = 4;
  inline bool has_fpgaver() const;
  inline void clear_fpgaver();
  static const int kFpgaVerFieldNumber = 4;
  inline ::google::protobuf::uint32 fpgaver() const;
  inline void set_fpgaver(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:STSubVers)
 private:
  inline void set_has_ulsubsysid();
  inline void clear_has_ulsubsysid();
  inline void set_has_strtime();
  inline void clear_has_strtime();
  inline void set_has_strversions();
  inline void clear_has_strversions();
  inline void set_has_fpgaver();
  inline void clear_has_fpgaver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strtime_;
  ::google::protobuf::uint32 ulsubsysid_;
  ::google::protobuf::uint32 fpgaver_;
  ::std::string* strversions_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STSubVers* default_instance_;
};
// -------------------------------------------------------------------

class STAlarmInfo : public ::google::protobuf::Message {
 public:
  STAlarmInfo();
  virtual ~STAlarmInfo();

  STAlarmInfo(const STAlarmInfo& from);

  inline STAlarmInfo& operator=(const STAlarmInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STAlarmInfo& default_instance();

  void Swap(STAlarmInfo* other);

  // implements Message ----------------------------------------------

  STAlarmInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STAlarmInfo& from);
  void MergeFrom(const STAlarmInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ulAlarmId = 1;
  inline bool has_ulalarmid() const;
  inline void clear_ulalarmid();
  static const int kUlAlarmIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ulalarmid() const;
  inline void set_ulalarmid(::google::protobuf::uint32 value);

  // repeated uint32 ulParas = 2;
  inline int ulparas_size() const;
  inline void clear_ulparas();
  static const int kUlParasFieldNumber = 2;
  inline ::google::protobuf::uint32 ulparas(int index) const;
  inline void set_ulparas(int index, ::google::protobuf::uint32 value);
  inline void add_ulparas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ulparas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ulparas();

  // optional string strTime = 3;
  inline bool has_strtime() const;
  inline void clear_strtime();
  static const int kStrTimeFieldNumber = 3;
  inline const ::std::string& strtime() const;
  inline void set_strtime(const ::std::string& value);
  inline void set_strtime(const char* value);
  inline void set_strtime(const char* value, size_t size);
  inline ::std::string* mutable_strtime();
  inline ::std::string* release_strtime();
  inline void set_allocated_strtime(::std::string* strtime);

  // @@protoc_insertion_point(class_scope:STAlarmInfo)
 private:
  inline void set_has_ulalarmid();
  inline void clear_has_ulalarmid();
  inline void set_has_strtime();
  inline void clear_has_strtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ulparas_;
  ::std::string* strtime_;
  ::google::protobuf::uint32 ulalarmid_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STAlarmInfo* default_instance_;
};
// -------------------------------------------------------------------

class STTestVal : public ::google::protobuf::Message {
 public:
  STTestVal();
  virtual ~STTestVal();

  STTestVal(const STTestVal& from);

  inline STTestVal& operator=(const STTestVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STTestVal& default_instance();

  void Swap(STTestVal* other);

  // implements Message ----------------------------------------------

  STTestVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STTestVal& from);
  void MergeFrom(const STTestVal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiCup = 1;
  inline bool has_uicup() const;
  inline void clear_uicup();
  static const int kUiCupFieldNumber = 1;
  inline ::google::protobuf::uint32 uicup() const;
  inline void set_uicup(::google::protobuf::uint32 value);

  // repeated uint32 uiVal = 2;
  inline int uival_size() const;
  inline void clear_uival();
  static const int kUiValFieldNumber = 2;
  inline ::google::protobuf::uint32 uival(int index) const;
  inline void set_uival(int index, ::google::protobuf::uint32 value);
  inline void add_uival(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uival() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uival();

  // @@protoc_insertion_point(class_scope:STTestVal)
 private:
  inline void set_has_uicup();
  inline void clear_has_uicup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uival_;
  ::google::protobuf::uint32 uicup_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STTestVal* default_instance_;
};
// -------------------------------------------------------------------

class SmosData : public ::google::protobuf::Message {
 public:
  SmosData();
  virtual ~SmosData();

  SmosData(const SmosData& from);

  inline SmosData& operator=(const SmosData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmosData& default_instance();

  void Swap(SmosData* other);

  // implements Message ----------------------------------------------

  SmosData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmosData& from);
  void MergeFrom(const SmosData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string prj = 1;
  inline bool has_prj() const;
  inline void clear_prj();
  static const int kPrjFieldNumber = 1;
  inline const ::std::string& prj() const;
  inline void set_prj(const ::std::string& value);
  inline void set_prj(const char* value);
  inline void set_prj(const char* value, size_t size);
  inline ::std::string* mutable_prj();
  inline ::std::string* release_prj();
  inline void set_allocated_prj(::std::string* prj);

  // optional uint32 startP = 2;
  inline bool has_startp() const;
  inline void clear_startp();
  static const int kStartPFieldNumber = 2;
  inline ::google::protobuf::uint32 startp() const;
  inline void set_startp(::google::protobuf::uint32 value);

  // optional uint32 endP = 3;
  inline bool has_endp() const;
  inline void clear_endp();
  static const int kEndPFieldNumber = 3;
  inline ::google::protobuf::uint32 endp() const;
  inline void set_endp(::google::protobuf::uint32 value);

  // optional uint32 order = 4;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 4;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // optional uint32 startBadP = 5;
  inline bool has_startbadp() const;
  inline void clear_startbadp();
  static const int kStartBadPFieldNumber = 5;
  inline ::google::protobuf::uint32 startbadp() const;
  inline void set_startbadp(::google::protobuf::uint32 value);

  // optional uint32 endBadP = 6;
  inline bool has_endbadp() const;
  inline void clear_endbadp();
  static const int kEndBadPFieldNumber = 6;
  inline ::google::protobuf::uint32 endbadp() const;
  inline void set_endbadp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SmosData)
 private:
  inline void set_has_prj();
  inline void clear_has_prj();
  inline void set_has_startp();
  inline void clear_has_startp();
  inline void set_has_endp();
  inline void clear_has_endp();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_startbadp();
  inline void clear_has_startbadp();
  inline void set_has_endbadp();
  inline void clear_has_endbadp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* prj_;
  ::google::protobuf::uint32 startp_;
  ::google::protobuf::uint32 endp_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 startbadp_;
  ::google::protobuf::uint32 endbadp_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static SmosData* default_instance_;
};
// -------------------------------------------------------------------

class STAbSorbSmos : public ::google::protobuf::Message {
 public:
  STAbSorbSmos();
  virtual ~STAbSorbSmos();

  STAbSorbSmos(const STAbSorbSmos& from);

  inline STAbSorbSmos& operator=(const STAbSorbSmos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STAbSorbSmos& default_instance();

  void Swap(STAbSorbSmos* other);

  // implements Message ----------------------------------------------

  STAbSorbSmos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STAbSorbSmos& from);
  void MergeFrom(const STAbSorbSmos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SmosData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::SmosData& data(int index) const;
  inline ::SmosData* mutable_data(int index);
  inline ::SmosData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SmosData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmosData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:STAbSorbSmos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SmosData > data_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STAbSorbSmos* default_instance_;
};
// -------------------------------------------------------------------

class STCupID : public ::google::protobuf::Message {
 public:
  STCupID();
  virtual ~STCupID();

  STCupID(const STCupID& from);

  inline STCupID& operator=(const STCupID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STCupID& default_instance();

  void Swap(STCupID* other);

  // implements Message ----------------------------------------------

  STCupID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STCupID& from);
  void MergeFrom(const STCupID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:STCupID)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STCupID* default_instance_;
};
// -------------------------------------------------------------------

class STSmpBacode : public ::google::protobuf::Message {
 public:
  STSmpBacode();
  virtual ~STSmpBacode();

  STSmpBacode(const STSmpBacode& from);

  inline STSmpBacode& operator=(const STSmpBacode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STSmpBacode& default_instance();

  void Swap(STSmpBacode* other);

  // implements Message ----------------------------------------------

  STSmpBacode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STSmpBacode& from);
  void MergeFrom(const STSmpBacode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cupno = 1;
  inline bool has_cupno() const;
  inline void clear_cupno();
  static const int kCupnoFieldNumber = 1;
  inline ::google::protobuf::uint32 cupno() const;
  inline void set_cupno(::google::protobuf::uint32 value);

  // optional string barcode = 2;
  inline bool has_barcode() const;
  inline void clear_barcode();
  static const int kBarcodeFieldNumber = 2;
  inline const ::std::string& barcode() const;
  inline void set_barcode(const ::std::string& value);
  inline void set_barcode(const char* value);
  inline void set_barcode(const char* value, size_t size);
  inline ::std::string* mutable_barcode();
  inline ::std::string* release_barcode();
  inline void set_allocated_barcode(::std::string* barcode);

  // @@protoc_insertion_point(class_scope:STSmpBacode)
 private:
  inline void set_has_cupno();
  inline void clear_has_cupno();
  inline void set_has_barcode();
  inline void clear_has_barcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* barcode_;
  ::google::protobuf::uint32 cupno_;
  friend void  protobuf_AddDesc_upmsgstruct_2eproto();
  friend void protobuf_AssignDesc_upmsgstruct_2eproto();
  friend void protobuf_ShutdownFile_upmsgstruct_2eproto();

  void InitAsDefaultInstance();
  static STSmpBacode* default_instance_;
};
// ===================================================================


// ===================================================================

// STKeyValue

// optional uint32 uiKey = 1;
inline bool STKeyValue::has_uikey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STKeyValue::set_has_uikey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STKeyValue::clear_has_uikey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STKeyValue::clear_uikey() {
  uikey_ = 0u;
  clear_has_uikey();
}
inline ::google::protobuf::uint32 STKeyValue::uikey() const {
  // @@protoc_insertion_point(field_get:STKeyValue.uiKey)
  return uikey_;
}
inline void STKeyValue::set_uikey(::google::protobuf::uint32 value) {
  set_has_uikey();
  uikey_ = value;
  // @@protoc_insertion_point(field_set:STKeyValue.uiKey)
}

// optional uint32 uiVal = 2;
inline bool STKeyValue::has_uival() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STKeyValue::set_has_uival() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STKeyValue::clear_has_uival() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STKeyValue::clear_uival() {
  uival_ = 0u;
  clear_has_uival();
}
inline ::google::protobuf::uint32 STKeyValue::uival() const {
  // @@protoc_insertion_point(field_get:STKeyValue.uiVal)
  return uival_;
}
inline void STKeyValue::set_uival(::google::protobuf::uint32 value) {
  set_has_uival();
  uival_ = value;
  // @@protoc_insertion_point(field_set:STKeyValue.uiVal)
}

// -------------------------------------------------------------------

// STAdPoints

// repeated uint32 uiADPoints = 1;
inline int STAdPoints::uiadpoints_size() const {
  return uiadpoints_.size();
}
inline void STAdPoints::clear_uiadpoints() {
  uiadpoints_.Clear();
}
inline ::google::protobuf::uint32 STAdPoints::uiadpoints(int index) const {
  // @@protoc_insertion_point(field_get:STAdPoints.uiADPoints)
  return uiadpoints_.Get(index);
}
inline void STAdPoints::set_uiadpoints(int index, ::google::protobuf::uint32 value) {
  uiadpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:STAdPoints.uiADPoints)
}
inline void STAdPoints::add_uiadpoints(::google::protobuf::uint32 value) {
  uiadpoints_.Add(value);
  // @@protoc_insertion_point(field_add:STAdPoints.uiADPoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
STAdPoints::uiadpoints() const {
  // @@protoc_insertion_point(field_list:STAdPoints.uiADPoints)
  return uiadpoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
STAdPoints::mutable_uiadpoints() {
  // @@protoc_insertion_point(field_mutable_list:STAdPoints.uiADPoints)
  return &uiadpoints_;
}

// -------------------------------------------------------------------

// STCupPos

// optional uint32 uiDskId = 1;
inline bool STCupPos::has_uidskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STCupPos::set_has_uidskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STCupPos::clear_has_uidskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STCupPos::clear_uidskid() {
  uidskid_ = 0u;
  clear_has_uidskid();
}
inline ::google::protobuf::uint32 STCupPos::uidskid() const {
  // @@protoc_insertion_point(field_get:STCupPos.uiDskId)
  return uidskid_;
}
inline void STCupPos::set_uidskid(::google::protobuf::uint32 value) {
  set_has_uidskid();
  uidskid_ = value;
  // @@protoc_insertion_point(field_set:STCupPos.uiDskId)
}

// optional uint32 uiCupId = 2;
inline bool STCupPos::has_uicupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STCupPos::set_has_uicupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STCupPos::clear_has_uicupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STCupPos::clear_uicupid() {
  uicupid_ = 0u;
  clear_has_uicupid();
}
inline ::google::protobuf::uint32 STCupPos::uicupid() const {
  // @@protoc_insertion_point(field_get:STCupPos.uiCupId)
  return uicupid_;
}
inline void STCupPos::set_uicupid(::google::protobuf::uint32 value) {
  set_has_uicupid();
  uicupid_ = value;
  // @@protoc_insertion_point(field_set:STCupPos.uiCupId)
}

// -------------------------------------------------------------------

// STMarginScan

// optional .STCupPos stCupPos = 1;
inline bool STMarginScan::has_stcuppos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STMarginScan::set_has_stcuppos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STMarginScan::clear_has_stcuppos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STMarginScan::clear_stcuppos() {
  if (stcuppos_ != NULL) stcuppos_->::STCupPos::Clear();
  clear_has_stcuppos();
}
inline const ::STCupPos& STMarginScan::stcuppos() const {
  // @@protoc_insertion_point(field_get:STMarginScan.stCupPos)
  return stcuppos_ != NULL ? *stcuppos_ : *default_instance_->stcuppos_;
}
inline ::STCupPos* STMarginScan::mutable_stcuppos() {
  set_has_stcuppos();
  if (stcuppos_ == NULL) stcuppos_ = new ::STCupPos;
  // @@protoc_insertion_point(field_mutable:STMarginScan.stCupPos)
  return stcuppos_;
}
inline ::STCupPos* STMarginScan::release_stcuppos() {
  clear_has_stcuppos();
  ::STCupPos* temp = stcuppos_;
  stcuppos_ = NULL;
  return temp;
}
inline void STMarginScan::set_allocated_stcuppos(::STCupPos* stcuppos) {
  delete stcuppos_;
  stcuppos_ = stcuppos;
  if (stcuppos) {
    set_has_stcuppos();
  } else {
    clear_has_stcuppos();
  }
  // @@protoc_insertion_point(field_set_allocated:STMarginScan.stCupPos)
}

// optional uint32 uiMarginDepth = 2;
inline bool STMarginScan::has_uimargindepth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STMarginScan::set_has_uimargindepth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STMarginScan::clear_has_uimargindepth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STMarginScan::clear_uimargindepth() {
  uimargindepth_ = 0u;
  clear_has_uimargindepth();
}
inline ::google::protobuf::uint32 STMarginScan::uimargindepth() const {
  // @@protoc_insertion_point(field_get:STMarginScan.uiMarginDepth)
  return uimargindepth_;
}
inline void STMarginScan::set_uimargindepth(::google::protobuf::uint32 value) {
  set_has_uimargindepth();
  uimargindepth_ = value;
  // @@protoc_insertion_point(field_set:STMarginScan.uiMarginDepth)
}

// -------------------------------------------------------------------

// STLiquidInfo

// optional .STCupPos stCupPos = 1;
inline bool STLiquidInfo::has_stcuppos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STLiquidInfo::set_has_stcuppos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STLiquidInfo::clear_has_stcuppos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STLiquidInfo::clear_stcuppos() {
  if (stcuppos_ != NULL) stcuppos_->::STCupPos::Clear();
  clear_has_stcuppos();
}
inline const ::STCupPos& STLiquidInfo::stcuppos() const {
  // @@protoc_insertion_point(field_get:STLiquidInfo.stCupPos)
  return stcuppos_ != NULL ? *stcuppos_ : *default_instance_->stcuppos_;
}
inline ::STCupPos* STLiquidInfo::mutable_stcuppos() {
  set_has_stcuppos();
  if (stcuppos_ == NULL) stcuppos_ = new ::STCupPos;
  // @@protoc_insertion_point(field_mutable:STLiquidInfo.stCupPos)
  return stcuppos_;
}
inline ::STCupPos* STLiquidInfo::release_stcuppos() {
  clear_has_stcuppos();
  ::STCupPos* temp = stcuppos_;
  stcuppos_ = NULL;
  return temp;
}
inline void STLiquidInfo::set_allocated_stcuppos(::STCupPos* stcuppos) {
  delete stcuppos_;
  stcuppos_ = stcuppos;
  if (stcuppos) {
    set_has_stcuppos();
  } else {
    clear_has_stcuppos();
  }
  // @@protoc_insertion_point(field_set_allocated:STLiquidInfo.stCupPos)
}

// optional uint32 uiAddVol = 2;
inline bool STLiquidInfo::has_uiaddvol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STLiquidInfo::set_has_uiaddvol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STLiquidInfo::clear_has_uiaddvol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STLiquidInfo::clear_uiaddvol() {
  uiaddvol_ = 0u;
  clear_has_uiaddvol();
}
inline ::google::protobuf::uint32 STLiquidInfo::uiaddvol() const {
  // @@protoc_insertion_point(field_get:STLiquidInfo.uiAddVol)
  return uiaddvol_;
}
inline void STLiquidInfo::set_uiaddvol(::google::protobuf::uint32 value) {
  set_has_uiaddvol();
  uiaddvol_ = value;
  // @@protoc_insertion_point(field_set:STLiquidInfo.uiAddVol)
}

// -------------------------------------------------------------------

// STRctCupStatus

// optional uint32 uiRctCupPos = 1;
inline bool STRctCupStatus::has_uirctcuppos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STRctCupStatus::set_has_uirctcuppos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STRctCupStatus::clear_has_uirctcuppos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STRctCupStatus::clear_uirctcuppos() {
  uirctcuppos_ = 0u;
  clear_has_uirctcuppos();
}
inline ::google::protobuf::uint32 STRctCupStatus::uirctcuppos() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.uiRctCupPos)
  return uirctcuppos_;
}
inline void STRctCupStatus::set_uirctcuppos(::google::protobuf::uint32 value) {
  set_has_uirctcuppos();
  uirctcuppos_ = value;
  // @@protoc_insertion_point(field_set:STRctCupStatus.uiRctCupPos)
}

// optional .CupState enCupState = 2 [default = CUP_STATE_FREE];
inline bool STRctCupStatus::has_encupstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STRctCupStatus::set_has_encupstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STRctCupStatus::clear_has_encupstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STRctCupStatus::clear_encupstate() {
  encupstate_ = 0;
  clear_has_encupstate();
}
inline ::CupState STRctCupStatus::encupstate() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.enCupState)
  return static_cast< ::CupState >(encupstate_);
}
inline void STRctCupStatus::set_encupstate(::CupState value) {
  assert(::CupState_IsValid(value));
  set_has_encupstate();
  encupstate_ = value;
  // @@protoc_insertion_point(field_set:STRctCupStatus.enCupState)
}

// optional uint32 uiRctTimes = 3;
inline bool STRctCupStatus::has_uircttimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STRctCupStatus::set_has_uircttimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STRctCupStatus::clear_has_uircttimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STRctCupStatus::clear_uircttimes() {
  uircttimes_ = 0u;
  clear_has_uircttimes();
}
inline ::google::protobuf::uint32 STRctCupStatus::uircttimes() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.uiRctTimes)
  return uircttimes_;
}
inline void STRctCupStatus::set_uircttimes(::google::protobuf::uint32 value) {
  set_has_uircttimes();
  uircttimes_ = value;
  // @@protoc_insertion_point(field_set:STRctCupStatus.uiRctTimes)
}

// optional uint32 uiTaskId = 4;
inline bool STRctCupStatus::has_uitaskid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STRctCupStatus::set_has_uitaskid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STRctCupStatus::clear_has_uitaskid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STRctCupStatus::clear_uitaskid() {
  uitaskid_ = 0u;
  clear_has_uitaskid();
}
inline ::google::protobuf::uint32 STRctCupStatus::uitaskid() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.uiTaskId)
  return uitaskid_;
}
inline void STRctCupStatus::set_uitaskid(::google::protobuf::uint32 value) {
  set_has_uitaskid();
  uitaskid_ = value;
  // @@protoc_insertion_point(field_set:STRctCupStatus.uiTaskId)
}

// optional .STCupPos stSmpPos = 5;
inline bool STRctCupStatus::has_stsmppos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void STRctCupStatus::set_has_stsmppos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void STRctCupStatus::clear_has_stsmppos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void STRctCupStatus::clear_stsmppos() {
  if (stsmppos_ != NULL) stsmppos_->::STCupPos::Clear();
  clear_has_stsmppos();
}
inline const ::STCupPos& STRctCupStatus::stsmppos() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.stSmpPos)
  return stsmppos_ != NULL ? *stsmppos_ : *default_instance_->stsmppos_;
}
inline ::STCupPos* STRctCupStatus::mutable_stsmppos() {
  set_has_stsmppos();
  if (stsmppos_ == NULL) stsmppos_ = new ::STCupPos;
  // @@protoc_insertion_point(field_mutable:STRctCupStatus.stSmpPos)
  return stsmppos_;
}
inline ::STCupPos* STRctCupStatus::release_stsmppos() {
  clear_has_stsmppos();
  ::STCupPos* temp = stsmppos_;
  stsmppos_ = NULL;
  return temp;
}
inline void STRctCupStatus::set_allocated_stsmppos(::STCupPos* stsmppos) {
  delete stsmppos_;
  stsmppos_ = stsmppos;
  if (stsmppos) {
    set_has_stsmppos();
  } else {
    clear_has_stsmppos();
  }
  // @@protoc_insertion_point(field_set_allocated:STRctCupStatus.stSmpPos)
}

// optional uint32 uiDilutType = 6;
inline bool STRctCupStatus::has_uidiluttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void STRctCupStatus::set_has_uidiluttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void STRctCupStatus::clear_has_uidiluttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void STRctCupStatus::clear_uidiluttype() {
  uidiluttype_ = 0u;
  clear_has_uidiluttype();
}
inline ::google::protobuf::uint32 STRctCupStatus::uidiluttype() const {
  // @@protoc_insertion_point(field_get:STRctCupStatus.uiDilutType)
  return uidiluttype_;
}
inline void STRctCupStatus::set_uidiluttype(::google::protobuf::uint32 value) {
  set_has_uidiluttype();
  uidiluttype_ = value;
  // @@protoc_insertion_point(field_set:STRctCupStatus.uiDilutType)
}

// -------------------------------------------------------------------

// STBarcodeScan

// optional .STCupPos stCupPos = 1;
inline bool STBarcodeScan::has_stcuppos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STBarcodeScan::set_has_stcuppos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STBarcodeScan::clear_has_stcuppos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STBarcodeScan::clear_stcuppos() {
  if (stcuppos_ != NULL) stcuppos_->::STCupPos::Clear();
  clear_has_stcuppos();
}
inline const ::STCupPos& STBarcodeScan::stcuppos() const {
  // @@protoc_insertion_point(field_get:STBarcodeScan.stCupPos)
  return stcuppos_ != NULL ? *stcuppos_ : *default_instance_->stcuppos_;
}
inline ::STCupPos* STBarcodeScan::mutable_stcuppos() {
  set_has_stcuppos();
  if (stcuppos_ == NULL) stcuppos_ = new ::STCupPos;
  // @@protoc_insertion_point(field_mutable:STBarcodeScan.stCupPos)
  return stcuppos_;
}
inline ::STCupPos* STBarcodeScan::release_stcuppos() {
  clear_has_stcuppos();
  ::STCupPos* temp = stcuppos_;
  stcuppos_ = NULL;
  return temp;
}
inline void STBarcodeScan::set_allocated_stcuppos(::STCupPos* stcuppos) {
  delete stcuppos_;
  stcuppos_ = stcuppos;
  if (stcuppos) {
    set_has_stcuppos();
  } else {
    clear_has_stcuppos();
  }
  // @@protoc_insertion_point(field_set_allocated:STBarcodeScan.stCupPos)
}

// optional string strBarcode = 2;
inline bool STBarcodeScan::has_strbarcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STBarcodeScan::set_has_strbarcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STBarcodeScan::clear_has_strbarcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STBarcodeScan::clear_strbarcode() {
  if (strbarcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strbarcode_->clear();
  }
  clear_has_strbarcode();
}
inline const ::std::string& STBarcodeScan::strbarcode() const {
  // @@protoc_insertion_point(field_get:STBarcodeScan.strBarcode)
  return *strbarcode_;
}
inline void STBarcodeScan::set_strbarcode(const ::std::string& value) {
  set_has_strbarcode();
  if (strbarcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strbarcode_ = new ::std::string;
  }
  strbarcode_->assign(value);
  // @@protoc_insertion_point(field_set:STBarcodeScan.strBarcode)
}
inline void STBarcodeScan::set_strbarcode(const char* value) {
  set_has_strbarcode();
  if (strbarcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strbarcode_ = new ::std::string;
  }
  strbarcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:STBarcodeScan.strBarcode)
}
inline void STBarcodeScan::set_strbarcode(const char* value, size_t size) {
  set_has_strbarcode();
  if (strbarcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strbarcode_ = new ::std::string;
  }
  strbarcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STBarcodeScan.strBarcode)
}
inline ::std::string* STBarcodeScan::mutable_strbarcode() {
  set_has_strbarcode();
  if (strbarcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strbarcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STBarcodeScan.strBarcode)
  return strbarcode_;
}
inline ::std::string* STBarcodeScan::release_strbarcode() {
  clear_has_strbarcode();
  if (strbarcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strbarcode_;
    strbarcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STBarcodeScan::set_allocated_strbarcode(::std::string* strbarcode) {
  if (strbarcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strbarcode_;
  }
  if (strbarcode) {
    set_has_strbarcode();
    strbarcode_ = strbarcode;
  } else {
    clear_has_strbarcode();
    strbarcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STBarcodeScan.strBarcode)
}

// -------------------------------------------------------------------

// STReagInfo

// optional .STCupPos stCupPos = 1;
inline bool STReagInfo::has_stcuppos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STReagInfo::set_has_stcuppos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STReagInfo::clear_has_stcuppos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STReagInfo::clear_stcuppos() {
  if (stcuppos_ != NULL) stcuppos_->::STCupPos::Clear();
  clear_has_stcuppos();
}
inline const ::STCupPos& STReagInfo::stcuppos() const {
  // @@protoc_insertion_point(field_get:STReagInfo.stCupPos)
  return stcuppos_ != NULL ? *stcuppos_ : *default_instance_->stcuppos_;
}
inline ::STCupPos* STReagInfo::mutable_stcuppos() {
  set_has_stcuppos();
  if (stcuppos_ == NULL) stcuppos_ = new ::STCupPos;
  // @@protoc_insertion_point(field_mutable:STReagInfo.stCupPos)
  return stcuppos_;
}
inline ::STCupPos* STReagInfo::release_stcuppos() {
  clear_has_stcuppos();
  ::STCupPos* temp = stcuppos_;
  stcuppos_ = NULL;
  return temp;
}
inline void STReagInfo::set_allocated_stcuppos(::STCupPos* stcuppos) {
  delete stcuppos_;
  stcuppos_ = stcuppos;
  if (stcuppos) {
    set_has_stcuppos();
  } else {
    clear_has_stcuppos();
  }
  // @@protoc_insertion_point(field_set_allocated:STReagInfo.stCupPos)
}

// optional bytes strReagName = 2;
inline bool STReagInfo::has_strreagname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STReagInfo::set_has_strreagname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STReagInfo::clear_has_strreagname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STReagInfo::clear_strreagname() {
  if (strreagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strreagname_->clear();
  }
  clear_has_strreagname();
}
inline const ::std::string& STReagInfo::strreagname() const {
  // @@protoc_insertion_point(field_get:STReagInfo.strReagName)
  return *strreagname_;
}
inline void STReagInfo::set_strreagname(const ::std::string& value) {
  set_has_strreagname();
  if (strreagname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strreagname_ = new ::std::string;
  }
  strreagname_->assign(value);
  // @@protoc_insertion_point(field_set:STReagInfo.strReagName)
}
inline void STReagInfo::set_strreagname(const char* value) {
  set_has_strreagname();
  if (strreagname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strreagname_ = new ::std::string;
  }
  strreagname_->assign(value);
  // @@protoc_insertion_point(field_set_char:STReagInfo.strReagName)
}
inline void STReagInfo::set_strreagname(const void* value, size_t size) {
  set_has_strreagname();
  if (strreagname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strreagname_ = new ::std::string;
  }
  strreagname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STReagInfo.strReagName)
}
inline ::std::string* STReagInfo::mutable_strreagname() {
  set_has_strreagname();
  if (strreagname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strreagname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STReagInfo.strReagName)
  return strreagname_;
}
inline ::std::string* STReagInfo::release_strreagname() {
  clear_has_strreagname();
  if (strreagname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strreagname_;
    strreagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STReagInfo::set_allocated_strreagname(::std::string* strreagname) {
  if (strreagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strreagname_;
  }
  if (strreagname) {
    set_has_strreagname();
    strreagname_ = strreagname;
  } else {
    clear_has_strreagname();
    strreagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STReagInfo.strReagName)
}

// optional .BottleType enBType = 3;
inline bool STReagInfo::has_enbtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STReagInfo::set_has_enbtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STReagInfo::clear_has_enbtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STReagInfo::clear_enbtype() {
  enbtype_ = 2;
  clear_has_enbtype();
}
inline ::BottleType STReagInfo::enbtype() const {
  // @@protoc_insertion_point(field_get:STReagInfo.enBType)
  return static_cast< ::BottleType >(enbtype_);
}
inline void STReagInfo::set_enbtype(::BottleType value) {
  assert(::BottleType_IsValid(value));
  set_has_enbtype();
  enbtype_ = value;
  // @@protoc_insertion_point(field_set:STReagInfo.enBType)
}

// optional uint32 uiMarginDepth = 4;
inline bool STReagInfo::has_uimargindepth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STReagInfo::set_has_uimargindepth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STReagInfo::clear_has_uimargindepth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STReagInfo::clear_uimargindepth() {
  uimargindepth_ = 0u;
  clear_has_uimargindepth();
}
inline ::google::protobuf::uint32 STReagInfo::uimargindepth() const {
  // @@protoc_insertion_point(field_get:STReagInfo.uiMarginDepth)
  return uimargindepth_;
}
inline void STReagInfo::set_uimargindepth(::google::protobuf::uint32 value) {
  set_has_uimargindepth();
  uimargindepth_ = value;
  // @@protoc_insertion_point(field_set:STReagInfo.uiMarginDepth)
}

// optional uint32 uiReType = 5;
inline bool STReagInfo::has_uiretype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void STReagInfo::set_has_uiretype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void STReagInfo::clear_has_uiretype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void STReagInfo::clear_uiretype() {
  uiretype_ = 0u;
  clear_has_uiretype();
}
inline ::google::protobuf::uint32 STReagInfo::uiretype() const {
  // @@protoc_insertion_point(field_get:STReagInfo.uiReType)
  return uiretype_;
}
inline void STReagInfo::set_uiretype(::google::protobuf::uint32 value) {
  set_has_uiretype();
  uiretype_ = value;
  // @@protoc_insertion_point(field_set:STReagInfo.uiReType)
}

// -------------------------------------------------------------------

// STThreshold

// optional .BottleType enBType = 1;
inline bool STThreshold::has_enbtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STThreshold::set_has_enbtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STThreshold::clear_has_enbtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STThreshold::clear_enbtype() {
  enbtype_ = 2;
  clear_has_enbtype();
}
inline ::BottleType STThreshold::enbtype() const {
  // @@protoc_insertion_point(field_get:STThreshold.enBType)
  return static_cast< ::BottleType >(enbtype_);
}
inline void STThreshold::set_enbtype(::BottleType value) {
  assert(::BottleType_IsValid(value));
  set_has_enbtype();
  enbtype_ = value;
  // @@protoc_insertion_point(field_set:STThreshold.enBType)
}

// optional uint32 uiThreshold = 2;
inline bool STThreshold::has_uithreshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STThreshold::set_has_uithreshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STThreshold::clear_has_uithreshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STThreshold::clear_uithreshold() {
  uithreshold_ = 0u;
  clear_has_uithreshold();
}
inline ::google::protobuf::uint32 STThreshold::uithreshold() const {
  // @@protoc_insertion_point(field_get:STThreshold.uiThreshold)
  return uithreshold_;
}
inline void STThreshold::set_uithreshold(::google::protobuf::uint32 value) {
  set_has_uithreshold();
  uithreshold_ = value;
  // @@protoc_insertion_point(field_set:STThreshold.uiThreshold)
}

// -------------------------------------------------------------------

// STCupADValue

// optional uint32 uiCupId = 1;
inline bool STCupADValue::has_uicupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STCupADValue::set_has_uicupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STCupADValue::clear_has_uicupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STCupADValue::clear_uicupid() {
  uicupid_ = 0u;
  clear_has_uicupid();
}
inline ::google::protobuf::uint32 STCupADValue::uicupid() const {
  // @@protoc_insertion_point(field_get:STCupADValue.uiCupId)
  return uicupid_;
}
inline void STCupADValue::set_uicupid(::google::protobuf::uint32 value) {
  set_has_uicupid();
  uicupid_ = value;
  // @@protoc_insertion_point(field_set:STCupADValue.uiCupId)
}

// repeated uint32 uiADPoints = 2;
inline int STCupADValue::uiadpoints_size() const {
  return uiadpoints_.size();
}
inline void STCupADValue::clear_uiadpoints() {
  uiadpoints_.Clear();
}
inline ::google::protobuf::uint32 STCupADValue::uiadpoints(int index) const {
  // @@protoc_insertion_point(field_get:STCupADValue.uiADPoints)
  return uiadpoints_.Get(index);
}
inline void STCupADValue::set_uiadpoints(int index, ::google::protobuf::uint32 value) {
  uiadpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:STCupADValue.uiADPoints)
}
inline void STCupADValue::add_uiadpoints(::google::protobuf::uint32 value) {
  uiadpoints_.Add(value);
  // @@protoc_insertion_point(field_add:STCupADValue.uiADPoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
STCupADValue::uiadpoints() const {
  // @@protoc_insertion_point(field_list:STCupADValue.uiADPoints)
  return uiadpoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
STCupADValue::mutable_uiadpoints() {
  // @@protoc_insertion_point(field_mutable_list:STCupADValue.uiADPoints)
  return &uiadpoints_;
}

// -------------------------------------------------------------------

// STOffsetPara

// optional uint32 uiType = 1;
inline bool STOffsetPara::has_uitype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STOffsetPara::set_has_uitype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STOffsetPara::clear_has_uitype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STOffsetPara::clear_uitype() {
  uitype_ = 0u;
  clear_has_uitype();
}
inline ::google::protobuf::uint32 STOffsetPara::uitype() const {
  // @@protoc_insertion_point(field_get:STOffsetPara.uiType)
  return uitype_;
}
inline void STOffsetPara::set_uitype(::google::protobuf::uint32 value) {
  set_has_uitype();
  uitype_ = value;
  // @@protoc_insertion_point(field_set:STOffsetPara.uiType)
}

// optional uint32 uiPos = 2;
inline bool STOffsetPara::has_uipos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STOffsetPara::set_has_uipos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STOffsetPara::clear_has_uipos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STOffsetPara::clear_uipos() {
  uipos_ = 0u;
  clear_has_uipos();
}
inline ::google::protobuf::uint32 STOffsetPara::uipos() const {
  // @@protoc_insertion_point(field_get:STOffsetPara.uiPos)
  return uipos_;
}
inline void STOffsetPara::set_uipos(::google::protobuf::uint32 value) {
  set_has_uipos();
  uipos_ = value;
  // @@protoc_insertion_point(field_set:STOffsetPara.uiPos)
}

// optional uint32 uiDir = 3;
inline bool STOffsetPara::has_uidir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STOffsetPara::set_has_uidir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STOffsetPara::clear_has_uidir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STOffsetPara::clear_uidir() {
  uidir_ = 0u;
  clear_has_uidir();
}
inline ::google::protobuf::uint32 STOffsetPara::uidir() const {
  // @@protoc_insertion_point(field_get:STOffsetPara.uiDir)
  return uidir_;
}
inline void STOffsetPara::set_uidir(::google::protobuf::uint32 value) {
  set_has_uidir();
  uidir_ = value;
  // @@protoc_insertion_point(field_set:STOffsetPara.uiDir)
}

// optional uint32 uiStep = 4;
inline bool STOffsetPara::has_uistep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STOffsetPara::set_has_uistep() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STOffsetPara::clear_has_uistep() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STOffsetPara::clear_uistep() {
  uistep_ = 0u;
  clear_has_uistep();
}
inline ::google::protobuf::uint32 STOffsetPara::uistep() const {
  // @@protoc_insertion_point(field_get:STOffsetPara.uiStep)
  return uistep_;
}
inline void STOffsetPara::set_uistep(::google::protobuf::uint32 value) {
  set_has_uistep();
  uistep_ = value;
  // @@protoc_insertion_point(field_set:STOffsetPara.uiStep)
}

// -------------------------------------------------------------------

// STDarkCurrentAD

// repeated .STKeyValue stAdInfo = 1;
inline int STDarkCurrentAD::stadinfo_size() const {
  return stadinfo_.size();
}
inline void STDarkCurrentAD::clear_stadinfo() {
  stadinfo_.Clear();
}
inline const ::STKeyValue& STDarkCurrentAD::stadinfo(int index) const {
  // @@protoc_insertion_point(field_get:STDarkCurrentAD.stAdInfo)
  return stadinfo_.Get(index);
}
inline ::STKeyValue* STDarkCurrentAD::mutable_stadinfo(int index) {
  // @@protoc_insertion_point(field_mutable:STDarkCurrentAD.stAdInfo)
  return stadinfo_.Mutable(index);
}
inline ::STKeyValue* STDarkCurrentAD::add_stadinfo() {
  // @@protoc_insertion_point(field_add:STDarkCurrentAD.stAdInfo)
  return stadinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::STKeyValue >&
STDarkCurrentAD::stadinfo() const {
  // @@protoc_insertion_point(field_list:STDarkCurrentAD.stAdInfo)
  return stadinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::STKeyValue >*
STDarkCurrentAD::mutable_stadinfo() {
  // @@protoc_insertion_point(field_mutable_list:STDarkCurrentAD.stAdInfo)
  return &stadinfo_;
}

// -------------------------------------------------------------------

// STSubVers

// optional uint32 ulSubsysId = 1;
inline bool STSubVers::has_ulsubsysid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STSubVers::set_has_ulsubsysid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STSubVers::clear_has_ulsubsysid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STSubVers::clear_ulsubsysid() {
  ulsubsysid_ = 0u;
  clear_has_ulsubsysid();
}
inline ::google::protobuf::uint32 STSubVers::ulsubsysid() const {
  // @@protoc_insertion_point(field_get:STSubVers.ulSubsysId)
  return ulsubsysid_;
}
inline void STSubVers::set_ulsubsysid(::google::protobuf::uint32 value) {
  set_has_ulsubsysid();
  ulsubsysid_ = value;
  // @@protoc_insertion_point(field_set:STSubVers.ulSubsysId)
}

// optional string strTime = 2;
inline bool STSubVers::has_strtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STSubVers::set_has_strtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STSubVers::clear_has_strtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STSubVers::clear_strtime() {
  if (strtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_->clear();
  }
  clear_has_strtime();
}
inline const ::std::string& STSubVers::strtime() const {
  // @@protoc_insertion_point(field_get:STSubVers.strTime)
  return *strtime_;
}
inline void STSubVers::set_strtime(const ::std::string& value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
  // @@protoc_insertion_point(field_set:STSubVers.strTime)
}
inline void STSubVers::set_strtime(const char* value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:STSubVers.strTime)
}
inline void STSubVers::set_strtime(const char* value, size_t size) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STSubVers.strTime)
}
inline ::std::string* STSubVers::mutable_strtime() {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STSubVers.strTime)
  return strtime_;
}
inline ::std::string* STSubVers::release_strtime() {
  clear_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strtime_;
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STSubVers::set_allocated_strtime(::std::string* strtime) {
  if (strtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strtime_;
  }
  if (strtime) {
    set_has_strtime();
    strtime_ = strtime;
  } else {
    clear_has_strtime();
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STSubVers.strTime)
}

// optional string strVersions = 3;
inline bool STSubVers::has_strversions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STSubVers::set_has_strversions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STSubVers::clear_has_strversions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STSubVers::clear_strversions() {
  if (strversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strversions_->clear();
  }
  clear_has_strversions();
}
inline const ::std::string& STSubVers::strversions() const {
  // @@protoc_insertion_point(field_get:STSubVers.strVersions)
  return *strversions_;
}
inline void STSubVers::set_strversions(const ::std::string& value) {
  set_has_strversions();
  if (strversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strversions_ = new ::std::string;
  }
  strversions_->assign(value);
  // @@protoc_insertion_point(field_set:STSubVers.strVersions)
}
inline void STSubVers::set_strversions(const char* value) {
  set_has_strversions();
  if (strversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strversions_ = new ::std::string;
  }
  strversions_->assign(value);
  // @@protoc_insertion_point(field_set_char:STSubVers.strVersions)
}
inline void STSubVers::set_strversions(const char* value, size_t size) {
  set_has_strversions();
  if (strversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strversions_ = new ::std::string;
  }
  strversions_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STSubVers.strVersions)
}
inline ::std::string* STSubVers::mutable_strversions() {
  set_has_strversions();
  if (strversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strversions_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STSubVers.strVersions)
  return strversions_;
}
inline ::std::string* STSubVers::release_strversions() {
  clear_has_strversions();
  if (strversions_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strversions_;
    strversions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STSubVers::set_allocated_strversions(::std::string* strversions) {
  if (strversions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strversions_;
  }
  if (strversions) {
    set_has_strversions();
    strversions_ = strversions;
  } else {
    clear_has_strversions();
    strversions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STSubVers.strVersions)
}

// optional uint32 fpgaVer = 4;
inline bool STSubVers::has_fpgaver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STSubVers::set_has_fpgaver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STSubVers::clear_has_fpgaver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STSubVers::clear_fpgaver() {
  fpgaver_ = 0u;
  clear_has_fpgaver();
}
inline ::google::protobuf::uint32 STSubVers::fpgaver() const {
  // @@protoc_insertion_point(field_get:STSubVers.fpgaVer)
  return fpgaver_;
}
inline void STSubVers::set_fpgaver(::google::protobuf::uint32 value) {
  set_has_fpgaver();
  fpgaver_ = value;
  // @@protoc_insertion_point(field_set:STSubVers.fpgaVer)
}

// -------------------------------------------------------------------

// STAlarmInfo

// optional uint32 ulAlarmId = 1;
inline bool STAlarmInfo::has_ulalarmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STAlarmInfo::set_has_ulalarmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STAlarmInfo::clear_has_ulalarmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STAlarmInfo::clear_ulalarmid() {
  ulalarmid_ = 0u;
  clear_has_ulalarmid();
}
inline ::google::protobuf::uint32 STAlarmInfo::ulalarmid() const {
  // @@protoc_insertion_point(field_get:STAlarmInfo.ulAlarmId)
  return ulalarmid_;
}
inline void STAlarmInfo::set_ulalarmid(::google::protobuf::uint32 value) {
  set_has_ulalarmid();
  ulalarmid_ = value;
  // @@protoc_insertion_point(field_set:STAlarmInfo.ulAlarmId)
}

// repeated uint32 ulParas = 2;
inline int STAlarmInfo::ulparas_size() const {
  return ulparas_.size();
}
inline void STAlarmInfo::clear_ulparas() {
  ulparas_.Clear();
}
inline ::google::protobuf::uint32 STAlarmInfo::ulparas(int index) const {
  // @@protoc_insertion_point(field_get:STAlarmInfo.ulParas)
  return ulparas_.Get(index);
}
inline void STAlarmInfo::set_ulparas(int index, ::google::protobuf::uint32 value) {
  ulparas_.Set(index, value);
  // @@protoc_insertion_point(field_set:STAlarmInfo.ulParas)
}
inline void STAlarmInfo::add_ulparas(::google::protobuf::uint32 value) {
  ulparas_.Add(value);
  // @@protoc_insertion_point(field_add:STAlarmInfo.ulParas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
STAlarmInfo::ulparas() const {
  // @@protoc_insertion_point(field_list:STAlarmInfo.ulParas)
  return ulparas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
STAlarmInfo::mutable_ulparas() {
  // @@protoc_insertion_point(field_mutable_list:STAlarmInfo.ulParas)
  return &ulparas_;
}

// optional string strTime = 3;
inline bool STAlarmInfo::has_strtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STAlarmInfo::set_has_strtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STAlarmInfo::clear_has_strtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STAlarmInfo::clear_strtime() {
  if (strtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_->clear();
  }
  clear_has_strtime();
}
inline const ::std::string& STAlarmInfo::strtime() const {
  // @@protoc_insertion_point(field_get:STAlarmInfo.strTime)
  return *strtime_;
}
inline void STAlarmInfo::set_strtime(const ::std::string& value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
  // @@protoc_insertion_point(field_set:STAlarmInfo.strTime)
}
inline void STAlarmInfo::set_strtime(const char* value) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:STAlarmInfo.strTime)
}
inline void STAlarmInfo::set_strtime(const char* value, size_t size) {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  strtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STAlarmInfo.strTime)
}
inline ::std::string* STAlarmInfo::mutable_strtime() {
  set_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STAlarmInfo.strTime)
  return strtime_;
}
inline ::std::string* STAlarmInfo::release_strtime() {
  clear_has_strtime();
  if (strtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strtime_;
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STAlarmInfo::set_allocated_strtime(::std::string* strtime) {
  if (strtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strtime_;
  }
  if (strtime) {
    set_has_strtime();
    strtime_ = strtime;
  } else {
    clear_has_strtime();
    strtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STAlarmInfo.strTime)
}

// -------------------------------------------------------------------

// STTestVal

// optional uint32 uiCup = 1;
inline bool STTestVal::has_uicup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STTestVal::set_has_uicup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STTestVal::clear_has_uicup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STTestVal::clear_uicup() {
  uicup_ = 0u;
  clear_has_uicup();
}
inline ::google::protobuf::uint32 STTestVal::uicup() const {
  // @@protoc_insertion_point(field_get:STTestVal.uiCup)
  return uicup_;
}
inline void STTestVal::set_uicup(::google::protobuf::uint32 value) {
  set_has_uicup();
  uicup_ = value;
  // @@protoc_insertion_point(field_set:STTestVal.uiCup)
}

// repeated uint32 uiVal = 2;
inline int STTestVal::uival_size() const {
  return uival_.size();
}
inline void STTestVal::clear_uival() {
  uival_.Clear();
}
inline ::google::protobuf::uint32 STTestVal::uival(int index) const {
  // @@protoc_insertion_point(field_get:STTestVal.uiVal)
  return uival_.Get(index);
}
inline void STTestVal::set_uival(int index, ::google::protobuf::uint32 value) {
  uival_.Set(index, value);
  // @@protoc_insertion_point(field_set:STTestVal.uiVal)
}
inline void STTestVal::add_uival(::google::protobuf::uint32 value) {
  uival_.Add(value);
  // @@protoc_insertion_point(field_add:STTestVal.uiVal)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
STTestVal::uival() const {
  // @@protoc_insertion_point(field_list:STTestVal.uiVal)
  return uival_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
STTestVal::mutable_uival() {
  // @@protoc_insertion_point(field_mutable_list:STTestVal.uiVal)
  return &uival_;
}

// -------------------------------------------------------------------

// SmosData

// optional string prj = 1;
inline bool SmosData::has_prj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmosData::set_has_prj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmosData::clear_has_prj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmosData::clear_prj() {
  if (prj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prj_->clear();
  }
  clear_has_prj();
}
inline const ::std::string& SmosData::prj() const {
  // @@protoc_insertion_point(field_get:SmosData.prj)
  return *prj_;
}
inline void SmosData::set_prj(const ::std::string& value) {
  set_has_prj();
  if (prj_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prj_ = new ::std::string;
  }
  prj_->assign(value);
  // @@protoc_insertion_point(field_set:SmosData.prj)
}
inline void SmosData::set_prj(const char* value) {
  set_has_prj();
  if (prj_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prj_ = new ::std::string;
  }
  prj_->assign(value);
  // @@protoc_insertion_point(field_set_char:SmosData.prj)
}
inline void SmosData::set_prj(const char* value, size_t size) {
  set_has_prj();
  if (prj_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prj_ = new ::std::string;
  }
  prj_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmosData.prj)
}
inline ::std::string* SmosData::mutable_prj() {
  set_has_prj();
  if (prj_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prj_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SmosData.prj)
  return prj_;
}
inline ::std::string* SmosData::release_prj() {
  clear_has_prj();
  if (prj_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prj_;
    prj_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SmosData::set_allocated_prj(::std::string* prj) {
  if (prj_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prj_;
  }
  if (prj) {
    set_has_prj();
    prj_ = prj;
  } else {
    clear_has_prj();
    prj_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SmosData.prj)
}

// optional uint32 startP = 2;
inline bool SmosData::has_startp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmosData::set_has_startp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmosData::clear_has_startp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmosData::clear_startp() {
  startp_ = 0u;
  clear_has_startp();
}
inline ::google::protobuf::uint32 SmosData::startp() const {
  // @@protoc_insertion_point(field_get:SmosData.startP)
  return startp_;
}
inline void SmosData::set_startp(::google::protobuf::uint32 value) {
  set_has_startp();
  startp_ = value;
  // @@protoc_insertion_point(field_set:SmosData.startP)
}

// optional uint32 endP = 3;
inline bool SmosData::has_endp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmosData::set_has_endp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmosData::clear_has_endp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmosData::clear_endp() {
  endp_ = 0u;
  clear_has_endp();
}
inline ::google::protobuf::uint32 SmosData::endp() const {
  // @@protoc_insertion_point(field_get:SmosData.endP)
  return endp_;
}
inline void SmosData::set_endp(::google::protobuf::uint32 value) {
  set_has_endp();
  endp_ = value;
  // @@protoc_insertion_point(field_set:SmosData.endP)
}

// optional uint32 order = 4;
inline bool SmosData::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmosData::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmosData::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmosData::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 SmosData::order() const {
  // @@protoc_insertion_point(field_get:SmosData.order)
  return order_;
}
inline void SmosData::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:SmosData.order)
}

// optional uint32 startBadP = 5;
inline bool SmosData::has_startbadp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmosData::set_has_startbadp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SmosData::clear_has_startbadp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SmosData::clear_startbadp() {
  startbadp_ = 0u;
  clear_has_startbadp();
}
inline ::google::protobuf::uint32 SmosData::startbadp() const {
  // @@protoc_insertion_point(field_get:SmosData.startBadP)
  return startbadp_;
}
inline void SmosData::set_startbadp(::google::protobuf::uint32 value) {
  set_has_startbadp();
  startbadp_ = value;
  // @@protoc_insertion_point(field_set:SmosData.startBadP)
}

// optional uint32 endBadP = 6;
inline bool SmosData::has_endbadp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmosData::set_has_endbadp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SmosData::clear_has_endbadp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SmosData::clear_endbadp() {
  endbadp_ = 0u;
  clear_has_endbadp();
}
inline ::google::protobuf::uint32 SmosData::endbadp() const {
  // @@protoc_insertion_point(field_get:SmosData.endBadP)
  return endbadp_;
}
inline void SmosData::set_endbadp(::google::protobuf::uint32 value) {
  set_has_endbadp();
  endbadp_ = value;
  // @@protoc_insertion_point(field_set:SmosData.endBadP)
}

// -------------------------------------------------------------------

// STAbSorbSmos

// repeated .SmosData data = 1;
inline int STAbSorbSmos::data_size() const {
  return data_.size();
}
inline void STAbSorbSmos::clear_data() {
  data_.Clear();
}
inline const ::SmosData& STAbSorbSmos::data(int index) const {
  // @@protoc_insertion_point(field_get:STAbSorbSmos.data)
  return data_.Get(index);
}
inline ::SmosData* STAbSorbSmos::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:STAbSorbSmos.data)
  return data_.Mutable(index);
}
inline ::SmosData* STAbSorbSmos::add_data() {
  // @@protoc_insertion_point(field_add:STAbSorbSmos.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmosData >&
STAbSorbSmos::data() const {
  // @@protoc_insertion_point(field_list:STAbSorbSmos.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmosData >*
STAbSorbSmos::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:STAbSorbSmos.data)
  return &data_;
}

// -------------------------------------------------------------------

// STCupID

// repeated uint32 id = 1;
inline int STCupID::id_size() const {
  return id_.size();
}
inline void STCupID::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 STCupID::id(int index) const {
  // @@protoc_insertion_point(field_get:STCupID.id)
  return id_.Get(index);
}
inline void STCupID::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:STCupID.id)
}
inline void STCupID::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:STCupID.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
STCupID::id() const {
  // @@protoc_insertion_point(field_list:STCupID.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
STCupID::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:STCupID.id)
  return &id_;
}

// -------------------------------------------------------------------

// STSmpBacode

// optional uint32 cupno = 1;
inline bool STSmpBacode::has_cupno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STSmpBacode::set_has_cupno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STSmpBacode::clear_has_cupno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STSmpBacode::clear_cupno() {
  cupno_ = 0u;
  clear_has_cupno();
}
inline ::google::protobuf::uint32 STSmpBacode::cupno() const {
  // @@protoc_insertion_point(field_get:STSmpBacode.cupno)
  return cupno_;
}
inline void STSmpBacode::set_cupno(::google::protobuf::uint32 value) {
  set_has_cupno();
  cupno_ = value;
  // @@protoc_insertion_point(field_set:STSmpBacode.cupno)
}

// optional string barcode = 2;
inline bool STSmpBacode::has_barcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STSmpBacode::set_has_barcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STSmpBacode::clear_has_barcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STSmpBacode::clear_barcode() {
  if (barcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barcode_->clear();
  }
  clear_has_barcode();
}
inline const ::std::string& STSmpBacode::barcode() const {
  // @@protoc_insertion_point(field_get:STSmpBacode.barcode)
  return *barcode_;
}
inline void STSmpBacode::set_barcode(const ::std::string& value) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(value);
  // @@protoc_insertion_point(field_set:STSmpBacode.barcode)
}
inline void STSmpBacode::set_barcode(const char* value) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:STSmpBacode.barcode)
}
inline void STSmpBacode::set_barcode(const char* value, size_t size) {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barcode_ = new ::std::string;
  }
  barcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:STSmpBacode.barcode)
}
inline ::std::string* STSmpBacode::mutable_barcode() {
  set_has_barcode();
  if (barcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    barcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:STSmpBacode.barcode)
  return barcode_;
}
inline ::std::string* STSmpBacode::release_barcode() {
  clear_has_barcode();
  if (barcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = barcode_;
    barcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STSmpBacode::set_allocated_barcode(::std::string* barcode) {
  if (barcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete barcode_;
  }
  if (barcode) {
    set_has_barcode();
    barcode_ = barcode;
  } else {
    clear_has_barcode();
    barcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:STSmpBacode.barcode)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_upmsgstruct_2eproto__INCLUDED
